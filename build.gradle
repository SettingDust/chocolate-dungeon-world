import java.nio.file.Files
import java.nio.file.StandardCopyOption

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven {url = 'https://maven.minecraftforge.net'}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

group = 'com.lalameow'
version = '0.1.0'

configurations {
    accessTransformer
    coremod
}

java {
    archivesBaseName = 'chocolate-dungeon-world'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

repositories {
    maven {url "https://cursemaven.com"}
    maven {url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven'}
    maven {url 'https://dvs1.progwml6.com/files/maven'}
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    implementation fg.deobf("curse.maven:cqrepoured-303422:3605767")

    runtimeOnly fg.deobf('software.bernie.geckolib:forge-1.12.2-geckolib:3.0.13')
    coremod fg.deobf('curse.maven:ReachFix-556777:3584670')
    accessTransformer 'curse.maven:ReachFix-556777:3584670'
    accessTransformer 'mezz.jei:jei_1.12.2:4.16.1.302'
    accessTransformer "curse.maven:cqrepoured-303422:3605767"
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'

    def accessTransformers = files(configurations.accessTransformer.collect {zipTree(it)}).getAsFileTree()
    accessTransformer = files(
            'src/main/resources/META-INF/accesstransformer.cfg',
            accessTransformers.matching {include 'META-INF/jei_at.cfg'},
            accessTransformers.matching {include 'META-INF/accesstransformer.cfg'}
    )

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                chocolatedungeonworld {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                chocolatedungeonworld {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {srcDir 'src/generated/resources'}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "chocolate-dungeon-world",
                "Specification-Vendor"    : "SettingDust",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "SettingDust",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

def copyCoremods = task("copyCoremods") {
    def coremods = files(configurations.coremod)
    inputs.files(coremods)
    files(coremods).forEach(file -> {
        def target = project.file("run/mods").toPath().resolve(file.name)
        Files.copy(file.toPath(), target, StandardCopyOption.REPLACE_EXISTING)
    })
}

downloadAssets {
    finalizedBy(copyCoremods)
}